        -:    0:Source:prog.c
        -:    0:Graph:prog.gcno
        -:    0:Data:prog.gcda
        -:    0:Runs:5
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:// Quicksort partition function
        1:    5:int partition(float *data, int low, int high) {
        1:    6:  float pivot = data[high];
        1:    7:  int i = low - 1;
        -:    8:  
        3:    9:  for (int j = low; j < high; j++) {
        2:   10:    if (data[j] <= pivot) {
        1:   11:      i++;
        1:   12:      float temp = data[i];
        1:   13:      data[i] = data[j];
        1:   14:      data[j] = temp;
        -:   15:    }
        -:   16:  }
        -:   17:  
        1:   18:  float temp = data[i + 1];
        1:   19:  data[i + 1] = data[high];
        1:   20:  data[high] = temp;
        -:   21:  
        1:   22:  return i + 1;
        -:   23:}
        -:   24:
        -:   25:// Quicksort function
        3:   26:void quicksort(float *data, int low, int high) {
        3:   27:  if (low < high) {
        1:   28:    int pi = partition(data, low, high);
        1:   29:    quicksort(data, low, pi - 1);
        1:   30:    quicksort(data, pi + 1, high);
        -:   31:  }
        3:   32:}
        -:   33:
        5:   34:int main(int argc, char *argv[])
        -:   35:{
        -:   36:  // Check if correct number of arguments provided
        5:   37:  if (argc != 3) {
        1:   38:    fprintf(stderr, "Usage: %s infilename outfilename\n", argv[0]);
        1:   39:    return 1;
        -:   40:  }
        -:   41:
        4:   42:  char *input_filename = argv[1];
        4:   43:  char *output_filename = argv[2];
        -:   44:
        4:   45:  FILE *input_file_ptr = fopen(input_filename, "r");
        4:   46:  if (input_file_ptr == NULL) {
        1:   47:    fprintf(stderr, "Error: Cannot open input file '%s'\n", input_filename);
        1:   48:    return 1;
        -:   49:  }
        -:   50:
        3:   51:  int input_size = 0;
        -:   52:  // Read the first number and store it
        3:   53:  if (fscanf(input_file_ptr, "%d", &input_size) != 1) {
        1:   54:    fprintf(stderr, "Error: No numbers found in the file '%s'\n", input_filename);
        1:   55:    fclose(input_file_ptr);
        1:   56:    return 1;
        -:   57:  }
        -:   58:
        2:   59:  float *data = (float*) malloc(input_size * sizeof(float));
        2:   60:  if (data == NULL) {
        1:   61:    fprintf(stderr, "Error: Memory allocation failed\n");
        1:   62:    fclose(input_file_ptr);
        1:   63:    return 1;
        -:   64:  }
        -:   65:
        1:   66:  float num = 0;
        1:   67:  int i = 0;
        -:   68:  // Print all numbers after the first one
        4:   69:  while (fscanf(input_file_ptr, "%f", &num) == 1) {
        3:   70:    data[i] = num;
        3:   71:    i++;
        -:   72:  }
        -:   73:
        -:   74:  // sort the data using quicksort
        1:   75:  quicksort(data, 0, input_size - 1);
        -:   76:
        -:   77:  // Write the sorted data to the output file
        1:   78:  FILE *output_file_ptr = fopen(output_filename, "w");
        -:   79:
        1:   80:  fprintf(output_file_ptr, "%d\n", input_size);
        4:   81:  for (int j = 0; j < input_size; ++j) {
        -:   82:    // Print the last number without a newline
        3:   83:    if (j == input_size - 1)
        1:   84:      fprintf(output_file_ptr, "%#2.1f", data[j]);
        -:   85:    else
        2:   86:      fprintf(output_file_ptr, "%#2.1f\n", data[j]);
        -:   87:  }
        -:   88:
        -:   89:  // close the files
        1:   90:  fclose(output_file_ptr);
        1:   91:  fclose(input_file_ptr);
        -:   92:  // free the memory
        1:   93:  free(data);
        -:   94:  
        1:   95:  printf("Successfully sorted %d numbers from '%s' to '%s'\n", input_size, input_filename, output_filename);
        1:   96:  return 0;
        -:   97:}
