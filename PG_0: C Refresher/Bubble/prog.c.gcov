        -:    0:Source:prog.c
        -:    0:Graph:prog.gcno
        -:    0:Data:prog.gcda
        -:    0:Runs:5
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:
        5:    5:int main(int argc, char *argv[])
        -:    6:{
        -:    7:  // Check if correct number of arguments provided
        5:    8:  if (argc != 3) {
        1:    9:    fprintf(stderr, "Usage: %s infilename outfilename\n", argv[0]);
        1:   10:    return 1;
        -:   11:  }
        -:   12:
        4:   13:  char *input_filename = argv[1];
        4:   14:  char *output_filename = argv[2];
        -:   15:
        4:   16:  FILE *input_file_ptr = fopen(input_filename, "r");
        4:   17:  if (input_file_ptr == NULL) {
        1:   18:    fprintf(stderr, "Error: Cannot open input file '%s'\n", input_filename);
        1:   19:    return 1;
        -:   20:  }
        -:   21:
        3:   22:  int input_size = 0;
        -:   23:  // Read the first number and store it
        3:   24:  if (fscanf(input_file_ptr, "%d", &input_size) != 1) {
        1:   25:    fprintf(stderr, "Error: No numbers found in the file '%s'\n", input_filename);
        1:   26:    fclose(input_file_ptr);
        1:   27:    return 1;
        -:   28:  }
        -:   29:
        2:   30:  float *data = (float*) malloc(input_size * sizeof(float));
        2:   31:  if (data == NULL) {
        1:   32:    fprintf(stderr, "Error: Memory allocation failed\n");
        1:   33:    fclose(input_file_ptr);
        1:   34:    return 1;
        -:   35:  }
        -:   36:
        1:   37:  float num = 0;
        1:   38:  int i = 0;
        -:   39:  // Print all numbers after the first one
        4:   40:  while (fscanf(input_file_ptr, "%f", &num) == 1) {
        3:   41:    data[i] = num;
        3:   42:    i++;
        -:   43:  }
        -:   44:
        -:   45:  // sort the data using bubble sort
        3:   46:  for (int i = 0; i < input_size - 1; ++i) {
        5:   47:    for (int j = 0; j < input_size - i - 1; ++j) {
        3:   48:      if (data[j] > data[j + 1]) {
        1:   49:        float temp = data[j];
        1:   50:        data[j] = data[j + 1];
        1:   51:        data[j + 1] = temp;
        -:   52:      }
        -:   53:    }
        -:   54:  }
        -:   55:
        -:   56:  // Write the sorted data to the output file
        1:   57:  FILE *output_file_ptr = fopen(output_filename, "w");
        -:   58:
        1:   59:  fprintf(output_file_ptr, "%d\n", input_size);
        4:   60:  for (int j = 0; j < input_size; ++j) {
        -:   61:    // Print the last number without a newline
        3:   62:    if (j == input_size - 1)
        1:   63:      fprintf(output_file_ptr, "%#2.1f", data[j]);
        -:   64:    else
        2:   65:      fprintf(output_file_ptr, "%#2.1f\n", data[j]);
        -:   66:  }
        -:   67:
        -:   68:  // close the files
        1:   69:  fclose(output_file_ptr);
        1:   70:  fclose(input_file_ptr);
        -:   71:  // free the memory
        1:   72:  free(data);
        -:   73:  
        1:   74:  printf("Successfully sorted %d numbers from '%s' to '%s'\n", input_size, input_filename, output_filename);
        1:   75:  return 0;
        -:   76:}
