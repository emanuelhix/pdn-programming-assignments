        -:    0:Source:prog.c
        -:    0:Graph:prog.gcno
        -:    0:Data:prog.gcda
        -:    0:Runs:5
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:// Insertion sort function
        -:    5:// https://www.geeksforgeeks.org/dsa/insertion-sort-algorithm/
        1:    6:void insertionSort(int arr[], int n)
        -:    7:{
        4:    8:    for (int i = 1; i < n; ++i) {
        3:    9:        int key = arr[i];
        3:   10:        int j = i - 1;
        -:   11:
        -:   12:        /* Move elements of arr[0..i-1], that are
        -:   13:           greater than key, to one position ahead
        -:   14:           of their current position */
        7:   15:        while (j >= 0 && arr[j] > key) {
        4:   16:            arr[j + 1] = arr[j];
        4:   17:            j = j - 1;
        -:   18:        }
        3:   19:        arr[j + 1] = key;
        -:   20:    }
        1:   21:}
        -:   22:
        -:   23:
        5:   24:int main(int argc, char *argv[])
        -:   25:{
        -:   26:  // Check if correct number of arguments provided
        5:   27:  if (argc != 3) {
        1:   28:    fprintf(stderr, "Usage: %s infilename outfilename\n", argv[0]);
        1:   29:    return 1;
        -:   30:  }
        -:   31:
        4:   32:  char *input_filename = argv[1];
        4:   33:  char *output_filename = argv[2];
        -:   34:
        4:   35:  FILE *input_file_ptr = fopen(input_filename, "r");
        4:   36:  if (input_file_ptr == NULL) {
        1:   37:    fprintf(stderr, "Error: Cannot open input file '%s'\n", input_filename);
        1:   38:    return 1;
        -:   39:  }
        -:   40:
        3:   41:  int input_size = 0;
        -:   42:  // Read the first number and store it
        3:   43:  if (fscanf(input_file_ptr, "%d", &input_size) != 1) {
        1:   44:    fprintf(stderr, "Error: No numbers found in the file '%s'\n", input_filename);
        1:   45:    fclose(input_file_ptr);
        1:   46:    return 1;
        -:   47:  }
        -:   48:
        2:   49:  float *data = (float*) malloc(input_size * sizeof(float));
        2:   50:  if (data == NULL) {
        1:   51:    fprintf(stderr, "Error: Memory allocation failed\n");
        1:   52:    fclose(input_file_ptr);
        1:   53:    return 1;
        -:   54:  }
        -:   55:
        1:   56:  float num = 0;
        1:   57:  int i = 0;
        -:   58:  // Print all numbers after the first one
        5:   59:  while (fscanf(input_file_ptr, "%f", &num) == 1) {
        4:   60:    data[i] = num;
        4:   61:    i++;
        -:   62:  }
        -:   63:
        -:   64:  // sort the data using insertion sort
        1:   65:  insertionSort(data, input_size);
        -:   66:
        -:   67:  // Write the sorted data to the output file
        1:   68:  FILE *output_file_ptr = fopen(output_filename, "w");
        -:   69:
        1:   70:  fprintf(output_file_ptr, "%d\n", input_size);
        5:   71:  for (int j = 0; j < input_size; ++j) {
        -:   72:    // Print the last number without a newline
        4:   73:    if (j == input_size - 1)
        1:   74:      fprintf(output_file_ptr, "%#2.1f", data[j]);
        -:   75:    else
        3:   76:      fprintf(output_file_ptr, "%#2.1f\n", data[j]);
        -:   77:  }
        -:   78:
        -:   79:  // close the files
        1:   80:  fclose(output_file_ptr);
        1:   81:  fclose(input_file_ptr);
        -:   82:  // free the memory
        1:   83:  free(data);
        -:   84:  
        1:   85:  printf("Successfully sorted %d numbers from '%s' to '%s'\n", input_size, input_filename, output_filename);
        1:   86:  return 0;
        -:   87:}
