        -:    0:Source:prog.c
        -:    0:Graph:prog.gcno
        -:    0:Data:prog.gcda
        -:    0:Runs:5
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:// https://www.geeksforgeeks.org/c/c-program-for-merge-sort
        -:    5:// used geeksforgeek's implementation
        -:    6:
        -:    7:// Merges two subarrays of arr[].
        -:    8:// First subarray is arr[left..mid]
        -:    9:// Second subarray is arr[mid+1..right]
        3:   10:void merge(float arr[], int left, int mid, int right) {
        -:   11:    int i, j, k;
        3:   12:    int n1 = mid - left + 1;
        3:   13:    int n2 = right - mid;
        -:   14:
        -:   15:    // Create temporary arrays
        3:   16:    float leftArr[n1], rightArr[n2];
        -:   17:
        -:   18:    // Copy data to temporary arrays
        7:   19:    for (i = 0; i < n1; i++)
        4:   20:        leftArr[i] = arr[left + i];
        7:   21:    for (j = 0; j < n2; j++)
        4:   22:        rightArr[j] = arr[mid + 1 + j];
        -:   23:
        -:   24:    // Merge the temporary arrays back into arr[left..right]
        3:   25:    i = 0;
        3:   26:    j = 0;
        3:   27:    k = left;
        8:   28:    while (i < n1 && j < n2) {
        5:   29:        if (leftArr[i] <= rightArr[j]) {
        2:   30:            arr[k] = leftArr[i];
        2:   31:            i++;
        -:   32:        }
        -:   33:        else {
        3:   34:            arr[k] = rightArr[j];
        3:   35:            j++;
        -:   36:        }
        5:   37:        k++;
        -:   38:    }
        -:   39:
        -:   40:    // Copy the remaining elements of leftArr[], if any
        5:   41:    while (i < n1) {
        2:   42:        arr[k] = leftArr[i];
        2:   43:        i++;
        2:   44:        k++;
        -:   45:    }
        -:   46:
        -:   47:    // Copy the remaining elements of rightArr[], if any
        4:   48:    while (j < n2) {
        1:   49:        arr[k] = rightArr[j];
        1:   50:        j++;
        1:   51:        k++;
        -:   52:    }
        3:   53:}
        -:   54:
        -:   55:// The subarray to be sorted is in the index range [left-right]
        7:   56:void mergeSort(float arr[], int left, int right) {
        7:   57:    if (left < right) {
        -:   58:      
        -:   59:        // Calculate the midpoint
        3:   60:        int mid = left + (right - left) / 2;
        -:   61:
        -:   62:        // Sort first and second halves
        3:   63:        mergeSort(arr, left, mid);
        3:   64:        mergeSort(arr, mid + 1, right);
        -:   65:
        -:   66:        // Merge the sorted halves
        3:   67:        merge(arr, left, mid, right);
        -:   68:    }
        7:   69:}
        -:   70:
        5:   71:int main(int argc, char *argv[])
        -:   72:{
        -:   73:  // Check if correct number of arguments provided
        5:   74:  if (argc != 3) {
        1:   75:    fprintf(stderr, "Usage: %s infilename outfilename\n", argv[0]);
        1:   76:    return 1;
        -:   77:  }
        -:   78:
        4:   79:  char *input_filename = argv[1];
        4:   80:  char *output_filename = argv[2];
        -:   81:
        4:   82:  FILE *input_file_ptr = fopen(input_filename, "r");
        4:   83:  if (input_file_ptr == NULL) {
        1:   84:    fprintf(stderr, "Error: Cannot open input file '%s'\n", input_filename);
        1:   85:    return 1;
        -:   86:  }
        -:   87:
        3:   88:  int input_size = 0;
        -:   89:  // Read the first number and store it
        3:   90:  if (fscanf(input_file_ptr, "%d", &input_size) != 1) {
        1:   91:    fprintf(stderr, "Error: No numbers found in the file '%s'\n", input_filename);
        1:   92:    fclose(input_file_ptr);
        1:   93:    return 1;
        -:   94:  }
        -:   95:
        2:   96:  float *data = (float*) malloc(input_size * sizeof(float));
        2:   97:  if (data == NULL) {
        1:   98:    fprintf(stderr, "Error: Memory allocation failed\n");
        1:   99:    fclose(input_file_ptr);
        1:  100:    return 1;
        -:  101:  }
        -:  102:
        1:  103:  float num = 0;
        1:  104:  int i = 0;
        -:  105:  // Print all numbers after the first one
        5:  106:  while (fscanf(input_file_ptr, "%f", &num) == 1) {
        4:  107:    data[i] = num;
        4:  108:    i++;
        -:  109:  }
        -:  110:
        -:  111:  // sort the data using merge sort
        1:  112:  mergeSort(data, 0, input_size - 1);
        -:  113:
        -:  114:  // Write the sorted data to the output file
        1:  115:  FILE *output_file_ptr = fopen(output_filename, "w");
        -:  116:
        1:  117:  fprintf(output_file_ptr, "%d\n", input_size);
        5:  118:  for (int j = 0; j < input_size; ++j) {
        -:  119:    // Print the last number without a newline
        4:  120:    if (j == input_size - 1)
        1:  121:      fprintf(output_file_ptr, "%#2.1f", data[j]);
        -:  122:    else
        3:  123:      fprintf(output_file_ptr, "%#2.1f\n", data[j]);
        -:  124:  }
        -:  125:
        -:  126:  // close the files
        1:  127:  fclose(output_file_ptr);
        1:  128:  fclose(input_file_ptr);
        -:  129:  // free the memory
        1:  130:  free(data);
        -:  131:  
        1:  132:  printf("Successfully sorted %d numbers from '%s' to '%s'\n", input_size, input_filename, output_filename);
        1:  133:  return 0;
        -:  134:}
